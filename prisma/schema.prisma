datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  path      String   @unique
  items     Item[]
  units     Unit[]
  createdAt DateTime @default(now())
}

model Item {
  id               Int                @id @default(autoincrement())
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       Int
  name             String
  createdAt        DateTime           @default(now())
  fields           ItemField[]
  operations       Operation[]
  techCards        TechCard[]
  TechStep         TechStep[]
  TechStepMaterial TechStepMaterial[]
}

model ItemField {
  id     Int    @id @default(autoincrement())
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
  key    String
  value  String
}

model Unit {
  id               Int                @id @default(autoincrement())
  unit             String
  factor           Float
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       Int
  TechStepMaterial TechStepMaterial[]
}

model Operation {
  id       Int        @id @default(autoincrement())
  name     String
  machines Item[]
  TechStep TechStep[]
}

model TechCard {
  id        Int        @id @default(autoincrement())
  item      Item?      @relation(fields: [itemId], references: [id], onDelete: SetNull)
  itemId    Int? 
  name      String
  steps     TechStep[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model TechStep {
  id            Int                @id @default(autoincrement())
  techCard      TechCard           @relation(fields: [techCardId], references: [id], onDelete: Cascade)
  techCardId    Int
  order         Int
  name          String
  operation     Operation?         @relation(fields: [operationId], references: [id], onDelete: SetNull)
  operationId   Int?
  machine       Item?              @relation(fields: [machineItemId], references: [id], onDelete: SetNull)
  machineItemId Int?
  materials     TechStepMaterial[]
  fields        TechStepField[]
  createdAt     DateTime           @default(now())

  @@unique([techCardId, order])
}

model TechStepMaterial {
  id             Int      @id @default(autoincrement())
  step           TechStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId         Int
  material       Item     @relation(fields: [materialItemId], references: [id], onDelete: Restrict)
  materialItemId Int
  quantity       Float
  unit           Unit?    @relation(fields: [unitId], references: [id], onDelete: SetNull)
  unitId         Int?
}

model TechStepField {
  id     Int      @id @default(autoincrement())
  step   TechStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId Int
  key    String
  value  String
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  avatarUrl String?
  role      String   @default("user")
  createdAt DateTime @default(now())
}
