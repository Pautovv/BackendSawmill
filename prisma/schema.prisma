datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String
  path     String     @unique
  parentId Int?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")

  items Item[]
  units Unit[]

  createdAt DateTime @default(now())

  @@unique([parentId, slug])
  @@index([parentId])
}

model Warehouse {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  shelves       Shelf[]
  items         Item[]
  responsible   User?    @relation("WarehouseResponsible", fields: [responsibleId], references: [id])
  responsibleId Int?
  createdAt     DateTime @default(now())

  @@index([responsibleId])
}

model Shelf {
  id          Int       @id @default(autoincrement())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId Int
  name        String
  items       Item[]
  createdAt   DateTime  @default(now())

  @@unique([warehouseId, name])
  @@index([warehouseId])
}

model Item {
  id               Int                @id @default(autoincrement())
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       Int
  name             String
  warehouse        Warehouse?         @relation(fields: [warehouseId], references: [id])
  warehouseId      Int?
  shelf            Shelf?             @relation(fields: [shelfId], references: [id])
  shelfId          Int?
  createdAt        DateTime           @default(now())
  fields           ItemField[]
  operations       Operation[]
  techCards        TechCard[]
  TechStep         TechStep[]
  TechStepMaterial TechStepMaterial[]

  quantity Float @default(0) // ДОБАВЛЕНО: остаток на складе (логически — в штуках / базовой единице)

  @@index([categoryId])
  @@index([warehouseId])
  @@index([shelfId])
}

model ItemField {
  id     Int    @id @default(autoincrement())
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
  key    String
  value  String

  @@index([itemId])
  @@index([key])
}

model Unit {
  id               Int                @id @default(autoincrement())
  unit             String
  factor           Float
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       Int
  TechStepMaterial TechStepMaterial[]
}

model Operation {
  id       Int        @id @default(autoincrement())
  name     String
  machines Item[]
  TechStep TechStep[]
}

enum NomenclatureType {
  TECH_CARD_NAME
  TECH_STEP_NAME
  MACHINE
  MATERIAL
}

model Nomenclature {
  id        Int              @id @default(autoincrement())
  type      NomenclatureType
  name      String
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  techCards       TechCard[]         @relation("TechCardNameNomenclature")
  techSteps       TechStep[]         @relation("TechStepNameNomenclature")
  machineSteps    TechStep[]         @relation("TechStepMachineNomenclature")
  materialEntries TechStepMaterial[] @relation("TechStepMaterialNomenclature")

  @@unique([type, name])
  @@index([type])
  @@index([isActive])
}

model TechCard {
  id             Int           @id @default(autoincrement())
  item           Item?         @relation(fields: [itemId], references: [id], onDelete: SetNull)
  itemId         Int?
  name           String // snapshot
  nomenclatureId Int?
  nomenclature   Nomenclature? @relation("TechCardNameNomenclature", fields: [nomenclatureId], references: [id])
  steps          TechStep[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Task           Task[]
}

model TechStep {
  id                    Int                  @id @default(autoincrement())
  techCard              TechCard             @relation(fields: [techCardId], references: [id], onDelete: Cascade)
  techCardId            Int
  order                 Int
  name                  String
  nomenclatureId        Int?
  nomenclature          Nomenclature?        @relation("TechStepNameNomenclature", fields: [nomenclatureId], references: [id])
  operation             Operation?           @relation(fields: [operationId], references: [id], onDelete: SetNull)
  operationId           Int?
  machineItemId         Int?
  machine               Item?                @relation(fields: [machineItemId], references: [id], onDelete: SetNull)
  machineNomenclatureId Int?
  machineNomenclature   Nomenclature?        @relation("TechStepMachineNomenclature", fields: [machineNomenclatureId], references: [id])
  materials             TechStepMaterial[]
  fields                TechStepField[]
  createdAt             DateTime             @default(now())
  TaskStepAssignment    TaskStepAssignment[]

  @@unique([techCardId, order])
  @@index([nomenclatureId])
  @@index([machineNomenclatureId])
}

model TechStepMaterial {
  id             Int           @id @default(autoincrement())
  step           TechStep      @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId         Int
  unit           Unit?         @relation(fields: [unitId], references: [id], onDelete: SetNull)
  unitId         Int?
  Item           Item?         @relation(fields: [itemId], references: [id])
  itemId         Int?
  nomenclatureId Int? // оставлено для совместимости, но больше не используем в новых шагах
  nomenclature   Nomenclature? @relation("TechStepMaterialNomenclature", fields: [nomenclatureId], references: [id])

  @@index([nomenclatureId])
  @@index([itemId])
}

model TechStepField {
  id     Int      @id @default(autoincrement())
  step   TechStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId Int
  key    String
  value  String
}

enum UserRole {
  USER
  ADMIN
  SELLER
  WAREHOUSE
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  password             String
  firstName            String
  lastName             String
  avatarUrl            String?
  role                 UserRole               @default(USER)
  createdAt            DateTime               @default(now())
  TaskWorkerAssignment TaskWorkerAssignment[]
  TaskDocument         TaskDocument[]

  responsibleWarehouses Warehouse[] @relation("WarehouseResponsible")
}

enum TaskStatus {
  DRAFT
  ACTIVE
  DONE
  CANCELLED
}

enum WorkerRole {
  LEAD
  MEMBER
}

enum DocumentStatus {
  NEW
  IN_PROGRESS
  DONE
}

model Task {
  id              Int                  @id @default(autoincrement())
  techCard        TechCard             @relation(fields: [techCardId], references: [id], onDelete: Cascade)
  techCardId      Int
  name            String
  status          TaskStatus           @default(ACTIVE)
  fields          TaskField[]
  stepAssignments TaskStepAssignment[]
  documents       TaskDocument[]
  report          TaskReport?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model TaskField {
  id     Int    @id @default(autoincrement())
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
  key    String
  value  String
}

model TaskStepAssignment {
  id              Int                    @id @default(autoincrement())
  task            Task                   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          Int
  step            TechStep               @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId          Int
  workers         TaskWorkerAssignment[]
  results         TaskStepResult[]
  plannedQuantity Float? // ДОБАВЛЕНО: количество изделий / повторов для этого шага (по которому умножаем материалы)

  @@unique([taskId, stepId])
}

model TaskWorkerAssignment {
  id               Int                @id @default(autoincrement())
  stepAssignment   TaskStepAssignment @relation(fields: [stepAssignmentId], references: [id], onDelete: Cascade)
  stepAssignmentId Int
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  role             WorkerRole

  @@unique([stepAssignmentId, userId])
}

model TaskDocument {
  id        Int            @id @default(autoincrement())
  task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  status    DocumentStatus @default(NEW)
  content   Json
  printable Boolean        @default(true) // <--- ДОБАВЛЕНО
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([taskId, userId])
  @@index([printable]) // <--- РЕКОМЕНДОВАННЫЙ ИНДЕКС
}

model TaskReport {
  id            Int              @id @default(autoincrement())
  task          Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        Int              @unique
  totalQuantity Float?
  totalUnit     String?
  notes         String?
  stepResults   TaskStepResult[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model TaskStepResult {
  id               Int                @id @default(autoincrement())
  taskReport       TaskReport         @relation(fields: [taskReportId], references: [id], onDelete: Cascade)
  taskReportId     Int
  stepAssignment   TaskStepAssignment @relation(fields: [stepAssignmentId], references: [id], onDelete: Cascade)
  stepAssignmentId Int
  quantity         Float?
  unit             String?
  notes            String?

  @@unique([taskReportId, stepAssignmentId])
}
