datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  slug     String
  path     String     @unique
  parentId Int?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")

  items Item[]
  units Unit[]

  createdAt DateTime @default(now())

  @@unique([parentId, slug])
  @@index([parentId])
}

model Item {
  id               Int                @id @default(autoincrement())
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       Int
  name             String
  createdAt        DateTime           @default(now())
  fields           ItemField[]
  operations       Operation[]
  techCards        TechCard[]
  TechStep         TechStep[]
  TechStepMaterial TechStepMaterial[]
}

model ItemField {
  id     Int    @id @default(autoincrement())
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
  key    String
  value  String
}

model Unit {
  id               Int                @id @default(autoincrement())
  unit             String
  factor           Float
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       Int
  TechStepMaterial TechStepMaterial[]
}

model Operation {
  id       Int        @id @default(autoincrement())
  name     String
  machines Item[]
  TechStep TechStep[]
}

model TechCard {
  id        Int        @id @default(autoincrement())
  item      Item?      @relation(fields: [itemId], references: [id], onDelete: SetNull)
  itemId    Int?
  name      String
  steps     TechStep[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Task      Task[]
}

model TechStep {
  id                 Int                  @id @default(autoincrement())
  techCard           TechCard             @relation(fields: [techCardId], references: [id], onDelete: Cascade)
  techCardId         Int
  order              Int
  name               String
  operation          Operation?           @relation(fields: [operationId], references: [id], onDelete: SetNull)
  operationId        Int?
  machine            Item?                @relation(fields: [machineItemId], references: [id], onDelete: SetNull)
  machineItemId      Int?
  materials          TechStepMaterial[]
  fields             TechStepField[]
  createdAt          DateTime             @default(now())
  TaskStepAssignment TaskStepAssignment[]

  @@unique([techCardId, order])
}

model TechStepMaterial {
  id       Int      @id @default(autoincrement())
  step     TechStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId   Int
  quantity Float
  unit     Unit?    @relation(fields: [unitId], references: [id], onDelete: SetNull)
  unitId   Int?
  Item     Item?    @relation(fields: [itemId], references: [id])
  itemId   Int?
}

model TechStepField {
  id     Int      @id @default(autoincrement())
  step   TechStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId Int
  key    String
  value  String
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  password             String
  firstName            String
  lastName             String
  avatarUrl            String?
  role                 String                 @default("user")
  createdAt            DateTime               @default(now())
  TaskWorkerAssignment TaskWorkerAssignment[]
  TaskDocument         TaskDocument[]
}

enum TaskStatus {
  DRAFT
  ACTIVE
  DONE
  CANCELLED
}

enum WorkerRole {
  LEAD
  MEMBER
}

enum DocumentStatus {
  NEW
  IN_PROGRESS
  DONE
}

model Task {
  id              Int                  @id @default(autoincrement())
  techCard        TechCard             @relation(fields: [techCardId], references: [id], onDelete: Cascade)
  techCardId      Int
  name            String
  status          TaskStatus           @default(ACTIVE)
  fields          TaskField[]
  stepAssignments TaskStepAssignment[]
  documents       TaskDocument[]
  report          TaskReport?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model TaskField {
  id     Int    @id @default(autoincrement())
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
  key    String
  value  String
}

model TaskStepAssignment {
  id      Int                    @id @default(autoincrement())
  task    Task                   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  Int
  step    TechStep               @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId  Int
  workers TaskWorkerAssignment[]
  results TaskStepResult[]

  @@unique([taskId, stepId])
}

model TaskWorkerAssignment {
  id               Int                @id @default(autoincrement())
  stepAssignment   TaskStepAssignment @relation(fields: [stepAssignmentId], references: [id], onDelete: Cascade)
  stepAssignmentId Int
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  role             WorkerRole

  @@unique([stepAssignmentId, userId])
}

model TaskDocument {
  id        Int            @id @default(autoincrement())
  task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  status    DocumentStatus @default(NEW)
  content   Json
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([taskId, userId])
}

model TaskReport {
  id            Int              @id @default(autoincrement())
  task          Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        Int              @unique
  totalQuantity Float?
  totalUnit     String?
  notes         String?
  stepResults   TaskStepResult[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model TaskStepResult {
  id               Int                @id @default(autoincrement())
  taskReport       TaskReport         @relation(fields: [taskReportId], references: [id], onDelete: Cascade)
  taskReportId     Int
  stepAssignment   TaskStepAssignment @relation(fields: [stepAssignmentId], references: [id], onDelete: Cascade)
  stepAssignmentId Int
  quantity         Float?
  unit             String?
  notes            String?

  @@unique([taskReportId, stepAssignmentId])
}

