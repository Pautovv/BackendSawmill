generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category { 
  id Int @id @default(autoincrement()) 
  name String @unique  
  path String @unique  
  items Item[] 
  units Unit[] 
  createdAt DateTime @default(now()) 
} 

model Item {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  name       String
  createdAt  DateTime @default(now())
  fields     ItemField[]
}

model ItemField {
  id     Int    @id @default(autoincrement())
  item   Item   @relation(fields: [itemId], references: [id])
  itemId Int
  key    String
  value  String
}

model Unit { 
  id Int @id @default(autoincrement()) 
  unit String 
  factor Float 
  category Category @relation(fields: [categoryId], references: [id]) 
  categoryId Int 
}

model Operation {
  id       Int       @id @default(autoincrement())
  name     String
  //machines Item[]    @relation("OperationMachines")
  profiles Profile[] @relation("ProfileOperations")

  passportSteps PassportStep[]
}

model Profile {
  id         Int         @id @default(autoincrement())
  name       String
  operations Operation[] @relation("ProfileOperations")

  passportSteps PassportStep[]
}

model Passport {
  id          Int      @id @default(autoincrement())
  productName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  steps PassportStep[]
  tasks Task[]

  @@index([productName])
}

model PassportStep {
  id         Int      @id @default(autoincrement())
  passport   Passport @relation(fields: [passportId], references: [id])
  passportId Int

  //machine   Item? @relation("MachineSteps", fields: [machineId], references: [id])
  machineId Int?

  operation   Operation? @relation(fields: [operationId], references: [id])
  operationId Int?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  //rawMaterial   Item? @relation("RawMaterialSteps", fields: [rawMaterialId], references: [id])
  rawMaterialId Int?

  repeats Int @default(1)
}

model Task {
  id         Int      @id @default(autoincrement())
  passport   Passport @relation(fields: [passportId], references: [id])
  passportId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  steps TaskStep[]
}

model TaskStep {
  id         Int  @id @default(autoincrement())
  task       Task @relation(fields: [taskId], references: [id])
  taskId     Int
  stepNumber Int

  mainWorkerId Int
  mainWorker   User @relation("MainWorkerSteps", fields: [mainWorkerId], references: [id])

  secondaryWorkers TaskSecondaryWorker[] @relation("StepSecondaryWorkers")
}

model TaskSecondaryWorker {
  id     Int      @id @default(autoincrement())
  step   TaskStep @relation("StepSecondaryWorkers", fields: [stepId], references: [id])
  stepId Int
  user   User     @relation("UserSecondarySteps", fields: [userId], references: [id])
  userId Int
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  avatarUrl  String?
  role       String   @default("user")
  createdAt  DateTime @default(now())
  telegramId String?

  mainTaskSteps  TaskStep[]            @relation("MainWorkerSteps")
  secondarySteps TaskSecondaryWorker[] @relation("UserSecondarySteps")
}
